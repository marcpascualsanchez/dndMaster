/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Character,
  ICharacter,
  ICharacterParams,
} from './models/Character';
import {
  IArmor,
} from './utils/armorList';
import {
  INote,
} from './components/character-sheet/misc-tab/note-element/note-element';
import {
  IWeapon,
} from './utils/weaponList';

export namespace Components {
  interface AppHome {}
  interface AppRoot {}
  interface ArmorElement {
    'armor': IArmor;
    'character': ICharacter;
    'isExtendable': boolean;
  }
  interface BackgroundsList {
    'characterParams': ICharacterParams;
    'isCreating': boolean;
    'step': string;
  }
  interface CharacterPersonalData {
    'characterParams': ICharacterParams;
  }
  interface CharacterSheet {
    'character': Character;
    'characterId': string;
  }
  interface CharactersList {}
  interface ChooseList {
    'cb': Function;
    'elementList': any[];
    'maxChosen': number;
    'minChosen': number;
    'name': string;
    'valueAttribute': string;
    'visible': boolean;
  }
  interface ChooseOptions {
    'characterParams': ICharacterParams;
  }
  interface ClassesList {
    'characterParams': ICharacterParams;
    'isCreating': boolean;
    'step': string;
  }
  interface CreateAbilityScore {
    'characterParams': ICharacterParams;
  }
  interface CreateNewCharacter {
    'step': string;
  }
  interface CurrencyManager {
    'character': ICharacter;
  }
  interface FightTab {
    'character': ICharacter;
  }
  interface HealthManager {
    'character': ICharacter;
  }
  interface MagicTab {
    'character': ICharacter;
  }
  interface MiscTab {
    'character': ICharacter;
  }
  interface NoteElement {
    'character': ICharacter;
    'note': INote;
  }
  interface ProfileTab {
    'character': ICharacter;
  }
  interface RacesList {
    'characterParams': ICharacterParams;
    'isCreating': boolean;
    'step': string;
  }
  interface WeaponElement {
    'character': ICharacter;
    'isExtendable': boolean;
    'weapon': IWeapon;
  }
}

declare global {


  interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {}
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLArmorElementElement extends Components.ArmorElement, HTMLStencilElement {}
  var HTMLArmorElementElement: {
    prototype: HTMLArmorElementElement;
    new (): HTMLArmorElementElement;
  };

  interface HTMLBackgroundsListElement extends Components.BackgroundsList, HTMLStencilElement {}
  var HTMLBackgroundsListElement: {
    prototype: HTMLBackgroundsListElement;
    new (): HTMLBackgroundsListElement;
  };

  interface HTMLCharacterPersonalDataElement extends Components.CharacterPersonalData, HTMLStencilElement {}
  var HTMLCharacterPersonalDataElement: {
    prototype: HTMLCharacterPersonalDataElement;
    new (): HTMLCharacterPersonalDataElement;
  };

  interface HTMLCharacterSheetElement extends Components.CharacterSheet, HTMLStencilElement {}
  var HTMLCharacterSheetElement: {
    prototype: HTMLCharacterSheetElement;
    new (): HTMLCharacterSheetElement;
  };

  interface HTMLCharactersListElement extends Components.CharactersList, HTMLStencilElement {}
  var HTMLCharactersListElement: {
    prototype: HTMLCharactersListElement;
    new (): HTMLCharactersListElement;
  };

  interface HTMLChooseListElement extends Components.ChooseList, HTMLStencilElement {}
  var HTMLChooseListElement: {
    prototype: HTMLChooseListElement;
    new (): HTMLChooseListElement;
  };

  interface HTMLChooseOptionsElement extends Components.ChooseOptions, HTMLStencilElement {}
  var HTMLChooseOptionsElement: {
    prototype: HTMLChooseOptionsElement;
    new (): HTMLChooseOptionsElement;
  };

  interface HTMLClassesListElement extends Components.ClassesList, HTMLStencilElement {}
  var HTMLClassesListElement: {
    prototype: HTMLClassesListElement;
    new (): HTMLClassesListElement;
  };

  interface HTMLCreateAbilityScoreElement extends Components.CreateAbilityScore, HTMLStencilElement {}
  var HTMLCreateAbilityScoreElement: {
    prototype: HTMLCreateAbilityScoreElement;
    new (): HTMLCreateAbilityScoreElement;
  };

  interface HTMLCreateNewCharacterElement extends Components.CreateNewCharacter, HTMLStencilElement {}
  var HTMLCreateNewCharacterElement: {
    prototype: HTMLCreateNewCharacterElement;
    new (): HTMLCreateNewCharacterElement;
  };

  interface HTMLCurrencyManagerElement extends Components.CurrencyManager, HTMLStencilElement {}
  var HTMLCurrencyManagerElement: {
    prototype: HTMLCurrencyManagerElement;
    new (): HTMLCurrencyManagerElement;
  };

  interface HTMLFightTabElement extends Components.FightTab, HTMLStencilElement {}
  var HTMLFightTabElement: {
    prototype: HTMLFightTabElement;
    new (): HTMLFightTabElement;
  };

  interface HTMLHealthManagerElement extends Components.HealthManager, HTMLStencilElement {}
  var HTMLHealthManagerElement: {
    prototype: HTMLHealthManagerElement;
    new (): HTMLHealthManagerElement;
  };

  interface HTMLMagicTabElement extends Components.MagicTab, HTMLStencilElement {}
  var HTMLMagicTabElement: {
    prototype: HTMLMagicTabElement;
    new (): HTMLMagicTabElement;
  };

  interface HTMLMiscTabElement extends Components.MiscTab, HTMLStencilElement {}
  var HTMLMiscTabElement: {
    prototype: HTMLMiscTabElement;
    new (): HTMLMiscTabElement;
  };

  interface HTMLNoteElementElement extends Components.NoteElement, HTMLStencilElement {}
  var HTMLNoteElementElement: {
    prototype: HTMLNoteElementElement;
    new (): HTMLNoteElementElement;
  };

  interface HTMLProfileTabElement extends Components.ProfileTab, HTMLStencilElement {}
  var HTMLProfileTabElement: {
    prototype: HTMLProfileTabElement;
    new (): HTMLProfileTabElement;
  };

  interface HTMLRacesListElement extends Components.RacesList, HTMLStencilElement {}
  var HTMLRacesListElement: {
    prototype: HTMLRacesListElement;
    new (): HTMLRacesListElement;
  };

  interface HTMLWeaponElementElement extends Components.WeaponElement, HTMLStencilElement {}
  var HTMLWeaponElementElement: {
    prototype: HTMLWeaponElementElement;
    new (): HTMLWeaponElementElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
    'app-root': HTMLAppRootElement;
    'armor-element': HTMLArmorElementElement;
    'backgrounds-list': HTMLBackgroundsListElement;
    'character-personal-data': HTMLCharacterPersonalDataElement;
    'character-sheet': HTMLCharacterSheetElement;
    'characters-list': HTMLCharactersListElement;
    'choose-list': HTMLChooseListElement;
    'choose-options': HTMLChooseOptionsElement;
    'classes-list': HTMLClassesListElement;
    'create-ability-score': HTMLCreateAbilityScoreElement;
    'create-new-character': HTMLCreateNewCharacterElement;
    'currency-manager': HTMLCurrencyManagerElement;
    'fight-tab': HTMLFightTabElement;
    'health-manager': HTMLHealthManagerElement;
    'magic-tab': HTMLMagicTabElement;
    'misc-tab': HTMLMiscTabElement;
    'note-element': HTMLNoteElementElement;
    'profile-tab': HTMLProfileTabElement;
    'races-list': HTMLRacesListElement;
    'weapon-element': HTMLWeaponElementElement;
  }
}

declare namespace LocalJSX {
  interface AppHome {}
  interface AppRoot {}
  interface ArmorElement {
    'armor'?: IArmor;
    'character'?: ICharacter;
    'isExtendable'?: boolean;
  }
  interface BackgroundsList {
    'characterParams'?: ICharacterParams;
    'isCreating'?: boolean;
    'onParamSelected'?: (event: CustomEvent<any>) => void;
    'step'?: string;
  }
  interface CharacterPersonalData {
    'characterParams'?: ICharacterParams;
    'onParamSelected'?: (event: CustomEvent<any>) => void;
  }
  interface CharacterSheet {
    'character'?: Character;
    'characterId'?: string;
  }
  interface CharactersList {}
  interface ChooseList {
    'cb'?: Function;
    'elementList'?: any[];
    'maxChosen'?: number;
    'minChosen'?: number;
    'name'?: string;
    'valueAttribute'?: string;
    'visible'?: boolean;
  }
  interface ChooseOptions {
    'characterParams'?: ICharacterParams;
    'onParamSelected'?: (event: CustomEvent<any>) => void;
  }
  interface ClassesList {
    'characterParams'?: ICharacterParams;
    'isCreating'?: boolean;
    'onParamSelected'?: (event: CustomEvent<any>) => void;
    'step'?: string;
  }
  interface CreateAbilityScore {
    'characterParams'?: ICharacterParams;
    'onParamSelected'?: (event: CustomEvent<any>) => void;
  }
  interface CreateNewCharacter {
    'step'?: string;
  }
  interface CurrencyManager {
    'character'?: ICharacter;
  }
  interface FightTab {
    'character'?: ICharacter;
  }
  interface HealthManager {
    'character'?: ICharacter;
  }
  interface MagicTab {
    'character'?: ICharacter;
  }
  interface MiscTab {
    'character'?: ICharacter;
  }
  interface NoteElement {
    'character'?: ICharacter;
    'note'?: INote;
  }
  interface ProfileTab {
    'character'?: ICharacter;
  }
  interface RacesList {
    'characterParams'?: ICharacterParams;
    'isCreating'?: boolean;
    'onParamSelected'?: (event: CustomEvent<any>) => void;
    'step'?: string;
  }
  interface WeaponElement {
    'character'?: ICharacter;
    'isExtendable'?: boolean;
    'weapon'?: IWeapon;
  }

  interface IntrinsicElements {
    'app-home': AppHome;
    'app-root': AppRoot;
    'armor-element': ArmorElement;
    'backgrounds-list': BackgroundsList;
    'character-personal-data': CharacterPersonalData;
    'character-sheet': CharacterSheet;
    'characters-list': CharactersList;
    'choose-list': ChooseList;
    'choose-options': ChooseOptions;
    'classes-list': ClassesList;
    'create-ability-score': CreateAbilityScore;
    'create-new-character': CreateNewCharacter;
    'currency-manager': CurrencyManager;
    'fight-tab': FightTab;
    'health-manager': HealthManager;
    'magic-tab': MagicTab;
    'misc-tab': MiscTab;
    'note-element': NoteElement;
    'profile-tab': ProfileTab;
    'races-list': RacesList;
    'weapon-element': WeaponElement;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'app-home': LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
      'app-root': LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
      'armor-element': LocalJSX.ArmorElement & JSXBase.HTMLAttributes<HTMLArmorElementElement>;
      'backgrounds-list': LocalJSX.BackgroundsList & JSXBase.HTMLAttributes<HTMLBackgroundsListElement>;
      'character-personal-data': LocalJSX.CharacterPersonalData & JSXBase.HTMLAttributes<HTMLCharacterPersonalDataElement>;
      'character-sheet': LocalJSX.CharacterSheet & JSXBase.HTMLAttributes<HTMLCharacterSheetElement>;
      'characters-list': LocalJSX.CharactersList & JSXBase.HTMLAttributes<HTMLCharactersListElement>;
      'choose-list': LocalJSX.ChooseList & JSXBase.HTMLAttributes<HTMLChooseListElement>;
      'choose-options': LocalJSX.ChooseOptions & JSXBase.HTMLAttributes<HTMLChooseOptionsElement>;
      'classes-list': LocalJSX.ClassesList & JSXBase.HTMLAttributes<HTMLClassesListElement>;
      'create-ability-score': LocalJSX.CreateAbilityScore & JSXBase.HTMLAttributes<HTMLCreateAbilityScoreElement>;
      'create-new-character': LocalJSX.CreateNewCharacter & JSXBase.HTMLAttributes<HTMLCreateNewCharacterElement>;
      'currency-manager': LocalJSX.CurrencyManager & JSXBase.HTMLAttributes<HTMLCurrencyManagerElement>;
      'fight-tab': LocalJSX.FightTab & JSXBase.HTMLAttributes<HTMLFightTabElement>;
      'health-manager': LocalJSX.HealthManager & JSXBase.HTMLAttributes<HTMLHealthManagerElement>;
      'magic-tab': LocalJSX.MagicTab & JSXBase.HTMLAttributes<HTMLMagicTabElement>;
      'misc-tab': LocalJSX.MiscTab & JSXBase.HTMLAttributes<HTMLMiscTabElement>;
      'note-element': LocalJSX.NoteElement & JSXBase.HTMLAttributes<HTMLNoteElementElement>;
      'profile-tab': LocalJSX.ProfileTab & JSXBase.HTMLAttributes<HTMLProfileTabElement>;
      'races-list': LocalJSX.RacesList & JSXBase.HTMLAttributes<HTMLRacesListElement>;
      'weapon-element': LocalJSX.WeaponElement & JSXBase.HTMLAttributes<HTMLWeaponElementElement>;
    }
  }
}


